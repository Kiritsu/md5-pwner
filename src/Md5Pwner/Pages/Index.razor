@page "/"
@using Md5Pwner.Database
@using Md5Pwner.Services
@using System.Threading

@inject PwnedWsService WsService

<PageTitle>Index</PageTitle>

<h1>MD5 Pwner 9000</h1>

@if (!slaveCount.HasValue || !crackedHashCount.HasValue)
{
    <p><em>Loading data...</em></p>
}
else
{
    <p>The websocket server is running and @slaveCount slaves are connected and ready!</p>
    <p>There are @crackedHashCount hashes that have been solved already.</p>
}

<p>
    <button class="btn btn-primary" onclick=@(() => RefreshData())>Refresh stats</button>
</p>

<p>
    <button class="btn btn-primary" onclick=@(() => ScaleSlaves())>Scale slaves</button>
    <input @bind="inputSlaveCount" />
</p>

<p>
    <button class="btn btn-primary" onclick=@(() => CrackMd5())>Crack MD5</button>
    <input @bind="md5Hash" />
    <input @bind="begin" />
    <input @bind="end" />
</p>

<p>Cracked hashes</p>
<table class="table">
    <thead>
        <tr>
            <th scope="col">Hash</th>
            <th scope="col">Initiated At</th>
            <th scope="col">Found At</th>
            <th scope="col">Value</th>
        </tr>
    </thead>
    <tbody>
        @if (pwnedHashes is not null)
        {
            @foreach (var hash in pwnedHashes)
            {
                <tr>
                    <td scope="row">@hash.Hash</td>
                    <td>@hash.InitiatedAt</td>
                    <td>@hash.FoundAt</td>
                    <td>@hash.Value</td>
                </tr>
            }
        }
    </tbody>
</table>
<br />
<br />
<p>Pending hashes</p>
<table class="table">
    <thead>
        <tr>
            <th scope="col">Hash</th>
            <th scope="col">Initiated At</th>
        </tr>
    </thead>
    <tbody>
        @if (pendingHashes is not null)
        {
            @foreach (var hash in pendingHashes)
            {
                <tr>
                    <td scope="row">@hash.Hash</td>
                    <td>@hash.InitiatedAt</td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private long? slaveCount;
    private long? crackedHashCount;

    private int? inputSlaveCount;

    private string? md5Hash;
    private int? begin = 0;
    private int? end = 15018569;

    private List<Md5PwnedHash>? pwnedHashes;
    private List<Md5PendingHash>? pendingHashes;

    void CrackMd5()
    {
        WsService.SetRange(begin ?? 0, end ?? 15018569);
        WsService.AddToQueue(md5Hash ?? "");
    }

    void ScaleSlaves()
    {
        WsService.ScaleSlaves(inputSlaveCount ?? 0);
        RefreshData();
    }

    void RefreshData()
    {
        slaveCount = WsService.GetSlaveCount();
        crackedHashCount = WsService.GetCrackedHashesCount();

        StateHasChanged();
    }

    void RefreshTables()
    {
        pwnedHashes = WsService.PwnedHashes.ToList();
        pendingHashes = WsService.PendingHashes.ToList();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(RefreshTables);
            InvokeAsync(RefreshData);
        }), null, 1000, 1000);

        RefreshData();
        RefreshTables();
    }
}
